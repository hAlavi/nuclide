/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @generated
 */

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ProcessWatcher_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftProcessWatcherService_unsubscribe_args = function(args) {
  this.processId = null;
  if (args) {
    if (args.processId !== undefined && args.processId !== null) {
      this.processId = args.processId;
    }
  }
};
ThriftProcessWatcherService_unsubscribe_args.prototype = {};
ThriftProcessWatcherService_unsubscribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.processId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftProcessWatcherService_unsubscribe_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftProcessWatcherService_unsubscribe_args');
  if (this.processId !== null && this.processId !== undefined) {
    output.writeFieldBegin('processId', Thrift.Type.I32, 1);
    output.writeI32(this.processId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftProcessWatcherService_unsubscribe_result = function(args) {
};
ThriftProcessWatcherService_unsubscribe_result.prototype = {};
ThriftProcessWatcherService_unsubscribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftProcessWatcherService_unsubscribe_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftProcessWatcherService_unsubscribe_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftProcessWatcherService_nextMessages_args = function(args) {
  this.processId = null;
  this.waitTimeSec = null;
  if (args) {
    if (args.processId !== undefined && args.processId !== null) {
      this.processId = args.processId;
    }
    if (args.waitTimeSec !== undefined && args.waitTimeSec !== null) {
      this.waitTimeSec = args.waitTimeSec;
    }
  }
};
ThriftProcessWatcherService_nextMessages_args.prototype = {};
ThriftProcessWatcherService_nextMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.processId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.waitTimeSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftProcessWatcherService_nextMessages_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftProcessWatcherService_nextMessages_args');
  if (this.processId !== null && this.processId !== undefined) {
    output.writeFieldBegin('processId', Thrift.Type.I32, 1);
    output.writeI32(this.processId);
    output.writeFieldEnd();
  }
  if (this.waitTimeSec !== null && this.waitTimeSec !== undefined) {
    output.writeFieldBegin('waitTimeSec', Thrift.Type.I32, 2);
    output.writeI32(this.waitTimeSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftProcessWatcherService_nextMessages_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ProcessWatcherMessage]);
    }
  }
};
ThriftProcessWatcherService_nextMessages_result.prototype = {};
ThriftProcessWatcherService_nextMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ProcessWatcherMessage();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftProcessWatcherService_nextMessages_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftProcessWatcherService_nextMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftProcessWatcherService_watchProcess_args = function(args) {
  this.command = null;
  this.cmdArgs = null;
  if (args) {
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
    if (args.cmdArgs !== undefined && args.cmdArgs !== null) {
      this.cmdArgs = Thrift.copyList(args.cmdArgs, [null]);
    }
  }
};
ThriftProcessWatcherService_watchProcess_args.prototype = {};
ThriftProcessWatcherService_watchProcess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.cmdArgs = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.cmdArgs.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftProcessWatcherService_watchProcess_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftProcessWatcherService_watchProcess_args');
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 1);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  if (this.cmdArgs !== null && this.cmdArgs !== undefined) {
    output.writeFieldBegin('cmdArgs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cmdArgs.length);
    for (var iter15 in this.cmdArgs)
    {
      if (this.cmdArgs.hasOwnProperty(iter15))
      {
        iter15 = this.cmdArgs[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftProcessWatcherService_watchProcess_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftProcessWatcherService_watchProcess_result.prototype = {};
ThriftProcessWatcherService_watchProcess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftProcessWatcherService_watchProcess_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftProcessWatcherService_watchProcess_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftProcessWatcherServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ThriftProcessWatcherServiceClient.prototype = {};
ThriftProcessWatcherServiceClient.prototype.seqid = function() { return this._seqid; };
ThriftProcessWatcherServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ThriftProcessWatcherServiceClient.prototype.unsubscribe = function(processId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unsubscribe(processId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unsubscribe(processId);
  }
};

ThriftProcessWatcherServiceClient.prototype.send_unsubscribe = function(processId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unsubscribe', Thrift.MessageType.CALL, this.seqid());
  var params = {
    processId: processId
  };
  var args = new ThriftProcessWatcherService_unsubscribe_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftProcessWatcherServiceClient.prototype.recv_unsubscribe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftProcessWatcherService_unsubscribe_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ThriftProcessWatcherServiceClient.prototype.nextMessages = function(processId, waitTimeSec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_nextMessages(processId, waitTimeSec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_nextMessages(processId, waitTimeSec);
  }
};

ThriftProcessWatcherServiceClient.prototype.send_nextMessages = function(processId, waitTimeSec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('nextMessages', Thrift.MessageType.CALL, this.seqid());
  var params = {
    processId: processId,
    waitTimeSec: waitTimeSec
  };
  var args = new ThriftProcessWatcherService_nextMessages_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftProcessWatcherServiceClient.prototype.recv_nextMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftProcessWatcherService_nextMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('nextMessages failed: unknown result');
};
ThriftProcessWatcherServiceClient.prototype.watchProcess = function(command, cmdArgs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_watchProcess(command, cmdArgs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_watchProcess(command, cmdArgs);
  }
};

ThriftProcessWatcherServiceClient.prototype.send_watchProcess = function(command, cmdArgs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('watchProcess', Thrift.MessageType.CALL, this.seqid());
  var params = {
    command: command,
    cmdArgs: cmdArgs
  };
  var args = new ThriftProcessWatcherService_watchProcess_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftProcessWatcherServiceClient.prototype.recv_watchProcess = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftProcessWatcherService_watchProcess_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('watchProcess failed: unknown result');
};
var ThriftProcessWatcherServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ThriftProcessWatcherServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ThriftProcessWatcherServiceProcessor.prototype.process_unsubscribe = function(seqid, input, output) {
  var args = new ThriftProcessWatcherService_unsubscribe_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unsubscribe.length === 1) {
    Q.fcall(this._handler.unsubscribe.bind(this._handler), args.processId)
      .then(function(result) {
        var result_obj = new ThriftProcessWatcherService_unsubscribe_result({success: result});
        output.writeMessageBegin("unsubscribe", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsubscribe", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unsubscribe(args.processId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftProcessWatcherService_unsubscribe_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unsubscribe", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsubscribe", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftProcessWatcherServiceProcessor.prototype.process_nextMessages = function(seqid, input, output) {
  var args = new ThriftProcessWatcherService_nextMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.nextMessages.length === 2) {
    Q.fcall(this._handler.nextMessages.bind(this._handler), args.processId, args.waitTimeSec)
      .then(function(result) {
        var result_obj = new ThriftProcessWatcherService_nextMessages_result({success: result});
        output.writeMessageBegin("nextMessages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("nextMessages", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.nextMessages(args.processId, args.waitTimeSec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftProcessWatcherService_nextMessages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("nextMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("nextMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftProcessWatcherServiceProcessor.prototype.process_watchProcess = function(seqid, input, output) {
  var args = new ThriftProcessWatcherService_watchProcess_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.watchProcess.length === 2) {
    Q.fcall(this._handler.watchProcess.bind(this._handler), args.command, args.cmdArgs)
      .then(function(result) {
        var result_obj = new ThriftProcessWatcherService_watchProcess_result({success: result});
        output.writeMessageBegin("watchProcess", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("watchProcess", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.watchProcess(args.command, args.cmdArgs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftProcessWatcherService_watchProcess_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("watchProcess", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("watchProcess", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
