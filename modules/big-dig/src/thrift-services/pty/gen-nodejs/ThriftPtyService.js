/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @generated
 */

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./pty_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftPtyService_disposeId_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ThriftPtyService_disposeId_args.prototype = {};
ThriftPtyService_disposeId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_disposeId_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_disposeId_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_disposeId_result = function(args) {
};
ThriftPtyService_disposeId_result.prototype = {};
ThriftPtyService_disposeId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_disposeId_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_disposeId_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_poll_args = function(args) {
  this.id = null;
  this.timeoutSec = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.timeoutSec !== undefined && args.timeoutSec !== null) {
      this.timeoutSec = args.timeoutSec;
    }
  }
};
ThriftPtyService_poll_args.prototype = {};
ThriftPtyService_poll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeoutSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_poll_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_poll_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.timeoutSec !== null && this.timeoutSec !== undefined) {
    output.writeFieldBegin('timeoutSec', Thrift.Type.I32, 2);
    output.writeI32(this.timeoutSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_poll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PollEvent(args.success);
    }
  }
};
ThriftPtyService_poll_result.prototype = {};
ThriftPtyService_poll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PollEvent();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_poll_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_poll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_resize_args = function(args) {
  this.id = null;
  this.columns = null;
  this.rows = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = args.columns;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = args.rows;
    }
  }
};
ThriftPtyService_resize_args.prototype = {};
ThriftPtyService_resize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.columns = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_resize_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_resize_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.I32, 2);
    output.writeI32(this.columns);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.I32, 3);
    output.writeI32(this.rows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_resize_result = function(args) {
};
ThriftPtyService_resize_result.prototype = {};
ThriftPtyService_resize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_resize_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_resize_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_setEncoding_args = function(args) {
  this.id = null;
  this.encoding = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.encoding !== undefined && args.encoding !== null) {
      this.encoding = args.encoding;
    }
  }
};
ThriftPtyService_setEncoding_args.prototype = {};
ThriftPtyService_setEncoding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.encoding = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_setEncoding_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_setEncoding_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.STRING, 2);
    output.writeString(this.encoding);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_setEncoding_result = function(args) {
};
ThriftPtyService_setEncoding_result.prototype = {};
ThriftPtyService_setEncoding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_setEncoding_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_setEncoding_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_spawn_args = function(args) {
  this.spawnArguments = null;
  if (args) {
    if (args.spawnArguments !== undefined && args.spawnArguments !== null) {
      this.spawnArguments = new ttypes.SpawnArguments(args.spawnArguments);
    }
  }
};
ThriftPtyService_spawn_args.prototype = {};
ThriftPtyService_spawn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.spawnArguments = new ttypes.SpawnArguments();
        this.spawnArguments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_spawn_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_spawn_args');
  if (this.spawnArguments !== null && this.spawnArguments !== undefined) {
    output.writeFieldBegin('spawnArguments', Thrift.Type.STRUCT, 1);
    this.spawnArguments.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_spawn_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftPtyService_spawn_result.prototype = {};
ThriftPtyService_spawn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_spawn_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_spawn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_writeInput_args = function(args) {
  this.id = null;
  this.data = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
ThriftPtyService_writeInput_args.prototype = {};
ThriftPtyService_writeInput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_writeInput_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_writeInput_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyService_writeInput_result = function(args) {
};
ThriftPtyService_writeInput_result.prototype = {};
ThriftPtyService_writeInput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPtyService_writeInput_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftPtyService_writeInput_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftPtyServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ThriftPtyServiceClient.prototype = {};
ThriftPtyServiceClient.prototype.seqid = function() { return this._seqid; };
ThriftPtyServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ThriftPtyServiceClient.prototype.disposeId = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disposeId(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disposeId(id);
  }
};

ThriftPtyServiceClient.prototype.send_disposeId = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disposeId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new ThriftPtyService_disposeId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftPtyServiceClient.prototype.recv_disposeId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftPtyService_disposeId_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ThriftPtyServiceClient.prototype.poll = function(id, timeoutSec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_poll(id, timeoutSec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_poll(id, timeoutSec);
  }
};

ThriftPtyServiceClient.prototype.send_poll = function(id, timeoutSec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('poll', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id,
    timeoutSec: timeoutSec
  };
  var args = new ThriftPtyService_poll_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftPtyServiceClient.prototype.recv_poll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftPtyService_poll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('poll failed: unknown result');
};
ThriftPtyServiceClient.prototype.resize = function(id, columns, rows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resize(id, columns, rows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resize(id, columns, rows);
  }
};

ThriftPtyServiceClient.prototype.send_resize = function(id, columns, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resize', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id,
    columns: columns,
    rows: rows
  };
  var args = new ThriftPtyService_resize_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftPtyServiceClient.prototype.recv_resize = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftPtyService_resize_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ThriftPtyServiceClient.prototype.setEncoding = function(id, encoding, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setEncoding(id, encoding);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setEncoding(id, encoding);
  }
};

ThriftPtyServiceClient.prototype.send_setEncoding = function(id, encoding) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setEncoding', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id,
    encoding: encoding
  };
  var args = new ThriftPtyService_setEncoding_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftPtyServiceClient.prototype.recv_setEncoding = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftPtyService_setEncoding_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ThriftPtyServiceClient.prototype.spawn = function(spawnArguments, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_spawn(spawnArguments);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_spawn(spawnArguments);
  }
};

ThriftPtyServiceClient.prototype.send_spawn = function(spawnArguments) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('spawn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    spawnArguments: spawnArguments
  };
  var args = new ThriftPtyService_spawn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftPtyServiceClient.prototype.recv_spawn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftPtyService_spawn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('spawn failed: unknown result');
};
ThriftPtyServiceClient.prototype.writeInput = function(id, data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeInput(id, data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeInput(id, data);
  }
};

ThriftPtyServiceClient.prototype.send_writeInput = function(id, data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeInput', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id,
    data: data
  };
  var args = new ThriftPtyService_writeInput_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftPtyServiceClient.prototype.recv_writeInput = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftPtyService_writeInput_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var ThriftPtyServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ThriftPtyServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ThriftPtyServiceProcessor.prototype.process_disposeId = function(seqid, input, output) {
  var args = new ThriftPtyService_disposeId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disposeId.length === 1) {
    Q.fcall(this._handler.disposeId.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new ThriftPtyService_disposeId_result({success: result});
        output.writeMessageBegin("disposeId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disposeId", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disposeId(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftPtyService_disposeId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disposeId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disposeId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftPtyServiceProcessor.prototype.process_poll = function(seqid, input, output) {
  var args = new ThriftPtyService_poll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.poll.length === 2) {
    Q.fcall(this._handler.poll.bind(this._handler), args.id, args.timeoutSec)
      .then(function(result) {
        var result_obj = new ThriftPtyService_poll_result({success: result});
        output.writeMessageBegin("poll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("poll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.poll(args.id, args.timeoutSec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftPtyService_poll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("poll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("poll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftPtyServiceProcessor.prototype.process_resize = function(seqid, input, output) {
  var args = new ThriftPtyService_resize_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resize.length === 3) {
    Q.fcall(this._handler.resize.bind(this._handler), args.id, args.columns, args.rows)
      .then(function(result) {
        var result_obj = new ThriftPtyService_resize_result({success: result});
        output.writeMessageBegin("resize", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resize", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resize(args.id, args.columns, args.rows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftPtyService_resize_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("resize", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resize", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftPtyServiceProcessor.prototype.process_setEncoding = function(seqid, input, output) {
  var args = new ThriftPtyService_setEncoding_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setEncoding.length === 2) {
    Q.fcall(this._handler.setEncoding.bind(this._handler), args.id, args.encoding)
      .then(function(result) {
        var result_obj = new ThriftPtyService_setEncoding_result({success: result});
        output.writeMessageBegin("setEncoding", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setEncoding", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setEncoding(args.id, args.encoding, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftPtyService_setEncoding_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setEncoding", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setEncoding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftPtyServiceProcessor.prototype.process_spawn = function(seqid, input, output) {
  var args = new ThriftPtyService_spawn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.spawn.length === 1) {
    Q.fcall(this._handler.spawn.bind(this._handler), args.spawnArguments)
      .then(function(result) {
        var result_obj = new ThriftPtyService_spawn_result({success: result});
        output.writeMessageBegin("spawn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("spawn", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.spawn(args.spawnArguments, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftPtyService_spawn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("spawn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("spawn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftPtyServiceProcessor.prototype.process_writeInput = function(seqid, input, output) {
  var args = new ThriftPtyService_writeInput_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeInput.length === 2) {
    Q.fcall(this._handler.writeInput.bind(this._handler), args.id, args.data)
      .then(function(result) {
        var result_obj = new ThriftPtyService_writeInput_result({success: result});
        output.writeMessageBegin("writeInput", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeInput", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.writeInput(args.id, args.data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftPtyService_writeInput_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("writeInput", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeInput", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
